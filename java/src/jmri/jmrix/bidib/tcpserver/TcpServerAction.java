package jmri.jmrix.bidib.tcpserver;

import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import jmri.jmrix.bidib.BiDiBSystemConnectionMemo;
//import jmri.jmrix.bidib.swing;

/**
 * This class implements the GUI releated functions for the TCP server.
 * It is generated by the BiDiB Menu and used for actions from the menu.
 * The real work is delegated to the TcpSerer.
 *
 * @author Alex Shepherd Copyright (C) 2006
 * @author Mark Underwood Copyright (C) 2015
 * @author Eckart Meyer Copyright (C) 2023-2024
 */
public class TcpServerAction extends AbstractAction {
    
    final java.util.ResourceBundle rb = java.util.ResourceBundle.getBundle("jmri.jmrix.bidib.swing.BiDiBSwingBundle"); // NOI18N

    private String enable;
    private String disable;
    private TcpServer server = null;

    public TcpServerAction() {
        log.warn("TcpServer cannot be started on startup because upstream connection is not known. Use the BiDiB connection type menu instead.");
    }


    public TcpServerAction(BiDiBSystemConnectionMemo memo, String enable, String disable) {
        super(enable);
        this.enable = enable;
        this.disable = disable;
        log.debug("create TcpServerAction for {} - \"{}\" \"{}\"", memo.getUserName(), enable, disable);
        // Get a server instance to cause the config to be read and the server
        // started if necessary
        //TcpServer server = InstanceManager.getDefault(TcpServer.class);
        server = new TcpServer(memo);
        log.debug("TCP Server is enabled by default: {}", server.isEnabled());
        putValue(javax.swing.Action.NAME, server.isEnabled() ? disable : enable);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        log.debug("TcpServerAction actionPerformed {}", e);
        //TcpServer server = InstanceManager.getDefault(TcpServer.class);
        if (server != null) {
            log.trace("TcpServer: {} for {}, enabled: {}", server, server.getSystemConnectionMemo().getUserName(), server.isEnabled());
            String text = (String)getValue(javax.swing.Action.NAME);
            log.trace("menu text was: {}", text);
            // toggle state of TCPserver
            if (server.isEnabled()) {
                server.disable();
            }
            else {
                server.enable();
            }
            putValue(javax.swing.Action.NAME, server.isEnabled() ? disable : enable);
//            ServerFrame f = InstanceManager.getDefault(ServerFrame.class);
//            f.setVisible(true);
        }
        else {
            log.debug("TcpServer is not created.");
        }
    }
    private final static org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(TcpServerAction.class);

}
